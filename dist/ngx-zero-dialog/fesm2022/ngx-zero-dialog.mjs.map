{"version":3,"file":"ngx-zero-dialog.mjs","sources":["../../../projects/ngx-zero-dialog/src/lib/dialog-content.directive.ts","../../../projects/ngx-zero-dialog/src/lib/providers/dialog-config.token.ts","../../../projects/ngx-zero-dialog/src/lib/providers/dialog-ref.token.ts","../../../projects/ngx-zero-dialog/src/lib/providers/host-data.token.ts","../../../projects/ngx-zero-dialog/src/lib/ngx-zero-dialog-host.ts","../../../projects/ngx-zero-dialog/src/lib/dialog-ref.ts","../../../projects/ngx-zero-dialog/src/lib/providers/dialog-data.token.ts","../../../projects/ngx-zero-dialog/src/lib/providers/provide-ngx-zero-dialog.ts","../../../projects/ngx-zero-dialog/src/lib/ngx-zero-dialog.service.ts","../../../projects/ngx-zero-dialog/src/public-api.ts","../../../projects/ngx-zero-dialog/src/ngx-zero-dialog.ts"],"sourcesContent":["import { Directive, ViewContainerRef } from '@angular/core';\n\n/**\n * A structural directive that marks an insertion point for dynamic dialog content.\n * It provides access to a `ViewContainerRef`, which can be used to dynamically\n * insert templates or components into the dialog.\n *\n * @export\n * @class DialogContentDirective\n */\n@Directive({ selector: '[dialogContent]', standalone: true })\nexport class DialogContentDirective {\n  constructor(readonly viewContainerRef: ViewContainerRef) {}\n}\n","import { InjectionToken } from \"@angular/core\";\nimport { IDialogConfig } from \"../models/dialog-config.interface\";\n\nexport const DIALOG_CONFIG = new InjectionToken<IDialogConfig>('DIALOG_CONFIG');\n","import { InjectionToken } from '@angular/core';\nimport { DialogRef } from '../dialog-ref';\n\nexport const DIALOG_REF = new InjectionToken<DialogRef>('DIALOG_REF');\n","import { InjectionToken } from '@angular/core';\nimport { IHostData } from '../models/host-data.interface';\n\nexport const HOST_DATA = new InjectionToken<IHostData>('HOST_DATA');\n","import { Directive, inject, ViewChild } from '@angular/core';\n\nimport { DialogContentDirective } from './dialog-content.directive';\nimport { DIALOG_CONFIG } from './providers/dialog-config.token';\nimport { DIALOG_REF } from './providers/dialog-ref.token';\nimport { HOST_DATA } from './providers/host-data.token';\n\n/**\n * A base class for creating custom dialog host components in Angular.\n * Provides utilities for managing dialog behavior, injecting dialog-specific dependencies,\n * and enabling custom dialog content insertion.\n *\n * @export\n * @class NgxZeroDialogHost\n * @template HostData The type of the data provided to the host component.\n */\n@Directive()\nexport class NgxZeroDialogHost<HostData> {\n  /**\n   * The insertion point for dynamic content within the dialog.\n   * This is linked to the `DialogContentDirective` and is used for rendering\n   * content such as templates or components into the dialog.\n   *\n   * @type {DialogContentDirective}\n   */\n  @ViewChild(DialogContentDirective, { static: true })\n  contentInsertionPoint!: DialogContentDirective;\n\n  /**\n   * A reference to the dialog, providing methods for controlling its lifecycle,\n   * such as closing the dialog.\n   *\n   * @readonly\n   * @type {DialogRef}\n   */\n  readonly dialogRef = inject(DIALOG_REF);\n\n  /**\n   * The configuration object for the dialog, specifying properties such as\n   * animations, backdrop behavior, and dialog-specific settings.\n   *\n   * @readonly\n   * @type {IDialogConfig}\n   */\n  readonly dialogConfig = inject(DIALOG_CONFIG);\n\n  /**\n   * The data specific to the host component, allowing customization of the host behavior\n   * based on this data.\n   *\n   * @readonly\n   * @type {HostData}\n   */\n  readonly hostData = inject<HostData>(HOST_DATA);\n\n  constructor() {\n    if (this.dialogConfig.closeOnBackdropClick) {\n      this.#closeOnBackdropClick();\n    }\n  }\n\n  /**\n   * Closes the dialog when the user clicks outside its bounds (on the backdrop),\n   * if the `closeOnBackdropClick` configuration is enabled.\n   *\n   * @private\n   */\n  #closeOnBackdropClick() {\n    this.dialogRef.nativeDialog.addEventListener(\n      'click',\n      (event) => {\n        const rect = this.dialogRef.nativeDialog.getBoundingClientRect();\n        const isInDialog =\n          rect.top <= event.clientY &&\n          event.clientY <= rect.top + rect.height &&\n          rect.left <= event.clientX &&\n          event.clientX <= rect.left + rect.width;\n\n        if (!isInDialog) {\n          this.dialogRef.close();\n        }\n      },\n      { once: true }\n    );\n  }\n}\n","import { Subject } from 'rxjs';\nimport { DialogResult } from './models/dialog-result.type';\n\n/**\n * A reference to a dialog, providing methods to control its lifecycle and observe its closure.\n *\n * @export\n * @class DialogRef\n * @template Result The type of the result returned by the dialog when it is closed.\n */\nexport class DialogRef<Result = unknown> {\n  /**\n   * Subject that emits the result of the dialog when it is closed.\n   * @private\n   */\n  readonly #_closed$ = new Subject<DialogResult<Result>>();\n\n  /**\n   * Observable that emits the result of the dialog when it is closed.\n   * Consumers can subscribe to this observable to react to dialog closure.\n   *\n   * @readonly\n   * @type {Observable<DialogResult<Result>>}\n   */\n  readonly closed$ = this.#_closed$.asObservable();\n\n  constructor(\n    readonly nativeDialog: HTMLDialogElement,\n    readonly animated?: boolean\n  ) {}\n\n  /**\n   * Closes the dialog and optionally emits a result.\n   * If animations are enabled, the dialog waits for the transition to complete before fully closing.\n   *\n   * @param {DialogResult<Result>} [value] Optional result to emit upon closure.\n   */\n  close(value?: DialogResult<Result>) {\n    if (this.animated) {\n      this.#terminateAnimatedDialog(value);\n    } else {\n      this.#terminateDialog(value);\n    }\n  }\n\n  /**\n   * Handles the termination of the dialog with animations.\n   * It waits for the transition to complete before closing the dialog and emitting the result.\n   *\n   * @private\n   * @param {DialogResult<Result>} [value] Optional result to emit upon closure.\n   */\n  #terminateAnimatedDialog(value?: DialogResult<Result>) {\n    if (this.animated) {\n      this.nativeDialog.classList.remove('ngx-zero-dialog-visible');\n      this.nativeDialog.addEventListener(\n        'transitionend',\n        () => {\n          this.#terminateDialog(value);\n        },\n        { once: true }\n      );\n    } else {\n      this.#terminateDialog(value);\n    }\n  }\n\n  /**\n   * Handles the termination of the dialog, closing the native dialog element\n   * and emitting the result through the `closed$` observable.\n   *\n   * @private\n   * @param {DialogResult<Result>} [value] Optional result to emit upon closure.\n   */\n  #terminateDialog(value?: DialogResult<Result>) {\n    this.nativeDialog.close();\n    this.#_closed$.next(value);\n  }\n}\n","import { InjectionToken } from \"@angular/core\";\nimport { IDialogData } from \"../models/dialog-data.interface\";\n\nexport const DIALOG_DATA = new InjectionToken<IDialogData>('DIALOG_DATA');\n","import { InjectionToken, Provider } from '@angular/core';\nimport { INgxZeroDialogConfig } from '../models/ngx-zero-dialog-config.interface';\n\nexport const NGX_ZERO_DIALOG_CONFIG = new InjectionToken<INgxZeroDialogConfig>(\n  'NGX_ZERO_DIALOG_CONFIG'\n);\nexport const provideNgxZeroDialog = (\n  config: INgxZeroDialogConfig\n): Provider => {\n  return {\n    provide: NGX_ZERO_DIALOG_CONFIG,\n    useValue: config,\n  };\n};\n","import { DOCUMENT } from '@angular/common';\nimport {\n  ApplicationRef,\n  ComponentRef,\n  createComponent,\n  EmbeddedViewRef,\n  inject,\n  Injectable,\n  Injector,\n  TemplateRef,\n} from '@angular/core';\nimport { defer, finalize, Observable, take } from 'rxjs';\n\nimport { DialogRef } from './dialog-ref';\nimport { Component } from './models/component.interface';\nimport { IDialogConfig } from './models/dialog-config.interface';\nimport { IDialogData } from './models/dialog-data.interface';\nimport { DialogResult } from './models/dialog-result.type';\nimport { IHostData } from './models/host-data.interface';\nimport { INgxZeroDialogConfig } from './models/ngx-zero-dialog-config.interface';\nimport { WithRequiredProperties } from './models/with-required-properties.type';\nimport { DIALOG_CONFIG } from './providers/dialog-config.token';\nimport { DIALOG_DATA } from './providers/dialog-data.token';\nimport { DIALOG_REF } from './providers/dialog-ref.token';\nimport { HOST_DATA } from './providers/host-data.token';\nimport { NGX_ZERO_DIALOG_CONFIG } from './providers/provide-ngx-zero-dialog';\n\n/**\n * NgxZeroDialogService managing dialog creation, configuration, and lifecycle in Angular.\n * It supports opening dialogs with components or templates, injecting dependencies,\n * and handling cleanup after dialog closure.\n *\n * @export\n * @class NgxZeroDialogService\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxZeroDialogService {\n  private readonly ngxZeroDialogConfig = inject<INgxZeroDialogConfig>(\n    NGX_ZERO_DIALOG_CONFIG\n  );\n\n  private readonly parentInjector = inject(Injector);\n\n  private readonly appRef = inject(ApplicationRef);\n\n  private readonly document = inject(DOCUMENT);\n\n  /**\n   * Opens a dialog with the specified template or component.\n   * The dialog configuration allows customization of behavior, data, and animations.\n   *\n   * @template Result The type of result the dialog will return.\n   * @param {Component | TemplateRef<any>} templateOrComponent The component or template to render in the dialog.\n   * @param {IDialogConfig} [config] Optional dialog configuration.\n   * @returns {Observable<DialogResult<Result>>} Observable emitting the result of the dialog on closure.\n   */\n  openDialog<Result>(\n    templateOrComponent: Component | TemplateRef<any>,\n    config?: IDialogConfig\n  ): Observable<DialogResult<Result>> {\n    return defer(() => {\n      const normalizedConfig = this.normalizeConfig(config);\n\n      const dialogRef = this.createDialogRef<Result>(normalizedConfig);\n\n      const dialogInjector = this.createDialogInjector(\n        this.parentInjector,\n        <DialogRef<unknown>>dialogRef,\n        normalizedConfig.dialogData\n      );\n\n      const hostInjector = this.createHostInjector(\n        this.parentInjector,\n        normalizedConfig.hostData,\n        normalizedConfig,\n        <DialogRef<unknown>>dialogRef\n      );\n\n      const hostComponentRef = createComponent<any>(\n        normalizedConfig.hostComponent,\n        {\n          environmentInjector: this.appRef.injector,\n          elementInjector: hostInjector,\n        }\n      );\n\n      this.appRef.attachView(hostComponentRef.hostView);\n\n      this.document\n        .getElementById(this.ngxZeroDialogConfig.containerNodeID)!\n        .appendChild(dialogRef.nativeDialog);\n\n      dialogRef.nativeDialog.appendChild(\n        this.getComponentRootNode(hostComponentRef)\n      );\n\n      let viewRef: EmbeddedViewRef<any>;\n\n      if (templateOrComponent instanceof TemplateRef) {\n        viewRef =\n          hostComponentRef.instance.contentInsertionPoint.viewContainerRef.createEmbeddedView(\n            templateOrComponent,\n            {\n              $implicit: dialogRef,\n              data: normalizedConfig.dialogData,\n              injector: dialogInjector,\n            }\n          );\n      } else {\n        viewRef =\n          hostComponentRef.instance.contentInsertionPoint.viewContainerRef.createComponent(\n            templateOrComponent,\n            { injector: dialogInjector }\n          );\n      }\n\n      dialogRef.nativeDialog.showModal();\n\n      if (normalizedConfig.animated) {\n        dialogRef.nativeDialog.classList.add('ngx-zero-dialog-visible');\n      }\n\n      return dialogRef.closed$.pipe(\n        take(1),\n        finalize(() => {\n          this.cleanupDialog(\n            dialogRef.nativeDialog.id,\n            hostComponentRef,\n            viewRef\n          );\n        })\n      );\n    });\n  }\n\n  /**\n   * Creates a new dialog reference, including DOM element creation and configuration.\n   *\n   * @template Result The type of result the dialog will return.\n   * @param {IDialogConfig} config The configuration for the dialog.\n   * @returns {DialogRef<Result>} The dialog reference object.\n   */\n  private createDialogRef<Result>(config: IDialogConfig): DialogRef<Result> {\n    const newDialog = document.createElement('dialog');\n    const dialogID = `dialog-${Date.now()}`;\n\n    newDialog.setAttribute('aria-modal', 'true');\n    newDialog.setAttribute('role', 'dialog');\n    newDialog.setAttribute('id', dialogID);\n\n    newDialog.classList.add('ngx-zero-dialog');\n\n    if (config.dialogNodeClass) {\n      newDialog.classList.add(config.dialogNodeClass);\n    }\n\n    if (config.animated) {\n      newDialog.classList.add('ngx-zero-dialog-hidden');\n    } else {\n      newDialog.classList.add('ngx-zero-dialog-visible');\n    }\n\n    const dialogRef = new DialogRef<Result>(newDialog, config.animated);\n\n    return dialogRef;\n  }\n\n  /**\n   * Cleans up the dialog after it is closed, including removing it from the DOM and destroying views.\n   *\n   * @param {string} dialogID The ID of the dialog element to remove.\n   * @param {ComponentRef<any>} dialogHostRef The reference to the host component.\n   * @param {EmbeddedViewRef<any>} viewRef The reference to the embedded view.\n   */\n  private cleanupDialog(\n    dialogID: string,\n    dialogHostRef: ComponentRef<any>,\n    viewRef: EmbeddedViewRef<any>\n  ) {\n    viewRef.destroy();\n\n    dialogHostRef.hostView.destroy();\n    dialogHostRef.destroy();\n\n    this.document\n      .getElementById(this.ngxZeroDialogConfig.containerNodeID)!\n      .removeChild(this.document.getElementById(dialogID)!);\n  }\n\n  /**\n   * Retrieves the root DOM node of a dynamically created component.\n   *\n   * @param {ComponentRef<any>} componentRef The reference to the dynamically created component.\n   * @returns {HTMLElement} The root DOM node of the component.\n   */\n  private getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return (componentRef.hostView as EmbeddedViewRef<any>)\n      .rootNodes[0] as HTMLElement;\n  }\n\n  /**\n   * Normalizes the dialog configuration by merging defaults with provided options.\n   *\n   * @param {IDialogConfig} [config] The provided dialog configuration.\n   * @returns {WithRequiredProperties<IDialogConfig>} The normalized dialog configuration.\n   */\n  private normalizeConfig(\n    config?: IDialogConfig\n  ): WithRequiredProperties<IDialogConfig> {\n    return {\n      closeOnBackdropClick: config?.closeOnBackdropClick ?? true,\n      dialogData: config?.dialogData ?? {},\n      hostComponent: config?.hostComponent,\n      animated:\n        this.ngxZeroDialogConfig.enableAnimations ?? config?.animated ?? true,\n      hostData: config?.hostData ?? {},\n    } as WithRequiredProperties<IDialogConfig>;\n  }\n\n  /**\n   * Creates a custom injector for injecting dialog-specific dependencies into the dialog component or template.\n   *\n   * @param {Injector} parentInjector The parent injector.\n   * @param {DialogRef} dialogRef The dialog reference.\n   * @param {IDialogData} data The data to inject into the dialog.\n   * @returns {Injector} The created custom injector.\n   */\n  private createDialogInjector(\n    parentInjector: Injector,\n    dialogRef: DialogRef,\n    data: IDialogData\n  ): Injector {\n    return Injector.create({\n      parent: parentInjector,\n      providers: [\n        {\n          provide: DIALOG_REF,\n          useValue: dialogRef,\n        },\n        {\n          provide: DIALOG_DATA,\n          useValue: data,\n        },\n      ],\n    });\n  }\n\n  /**\n   * Creates a custom injector for injecting host-specific dependencies into the host component.\n   *\n   * @param {Injector} parentInjector The parent injector.\n   * @param {IHostData} hostData The data specific to the host component.\n   * @param {IDialogConfig} dialogConfig The dialog configuration.\n   * @param {DialogRef} dialogRef The dialog reference.\n   * @returns {Injector} The created custom injector.\n   */\n  private createHostInjector(\n    parentInjector: Injector,\n    hostData: IHostData,\n    dialogConfig: IDialogConfig,\n    dialogRef: DialogRef\n  ): Injector {\n    return Injector.create({\n      parent: parentInjector,\n      providers: [\n        {\n          provide: HOST_DATA,\n          useValue: hostData,\n        },\n        {\n          provide: DIALOG_CONFIG,\n          useValue: dialogConfig,\n        },\n        {\n          provide: DIALOG_REF,\n          useValue: dialogRef,\n        },\n      ],\n    });\n  }\n}\n","/*\n * Public API Surface of ngx-zero-dialog\n */\nexport * from './lib/dialog-content.directive';\nexport * from './lib/models/dialog-config.interface';\nexport * from './lib/models/dialog-data.interface';\nexport * from './lib/models/host-data.interface';\nexport * from './lib/ngx-zero-dialog-host';\nexport * from './lib/ngx-zero-dialog.service';\nexport * from './lib/providers/dialog-config.token';\nexport * from './lib/providers/dialog-data.token';\nexport * from './lib/providers/dialog-ref.token';\nexport * from './lib/providers/provide-ngx-zero-dialog';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}